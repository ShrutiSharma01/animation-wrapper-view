{"version":3,"sources":["RippleAnimationWrapper.tsx"],"names":["RippleAnimationWrapper","BaseAnimationWrapper","constructor","props","stopAnimation","state","getAnimationStateFromProps","animationConfig","scale","opacity","_rippleAnimation","Animated","loop","sequence","delay","rippleIntervalDuration","parallel","timing","duration","rippleDuration","toValue","easing","interpolationDef","useNativeDriver","iterations","rippleCount","UNSAFE_componentWillReceiveProps","nextProps","_nextContext","nextState","setState","startAnimation","animationStarted","reset","start","animationFinished","stop","resetAnimation","setValue","renderAnimation","content","rippleStyle","getRippleStyle","rippleRadius","justifyContent","alignItems","backgroundColor","rippleColor","width","interpolate","inputRange","outputRange","height","_","Value","contentWidth","position","marginLeft","marginTop","borderRadius"],"mappings":"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","sourcesContent":["import { Animated, StyleProp, View, ViewStyle } from 'react-native';\nimport React from 'react';\nimport { BaseAnimationWrapper } from './BaseAnimationWrapper';\nimport { AnimationWrapperProps } from '../../Types';\nimport { RippleAnimationConfig } from '../../data/RippleAnimationConfig';\nimport getEasingFunction from \"../Utils\";\n\ninterface RippleAnimationState {\n    scale: Animated.Value;\n    opacity: Animated.Value;\n}\n\nexport interface RippleAnimationProps extends AnimationWrapperProps {\n    animationConfig: RippleAnimationConfig;\n}\n\n\nexport class RippleAnimationWrapper extends BaseAnimationWrapper<RippleAnimationProps, RippleAnimationState> {\n\n    private _rippleAnimation: Animated.CompositeAnimation;\n\n    public constructor(props: RippleAnimationProps) {\n        super(props);\n        this.state = this.getAnimationStateFromProps(props);\n\n        const { animationConfig } = this.props;\n        const { scale, opacity } = this.state;\n\n        this._rippleAnimation = Animated.loop(Animated.sequence([\n            Animated.delay(animationConfig.rippleIntervalDuration),\n            Animated.parallel([\n                Animated.timing(scale, {\n                    duration: animationConfig.rippleDuration,\n                    toValue: 1,\n                    easing: getEasingFunction(animationConfig.interpolationDef),\n                    useNativeDriver: false\n                }),\n                Animated.timing(opacity, {\n                    duration: animationConfig.rippleDuration,\n                    toValue: 0,\n                    easing: getEasingFunction(animationConfig.interpolationDef),\n                    useNativeDriver: false\n                })\n            ])\n        ]), {\n            iterations: animationConfig.rippleCount\n        });\n    }\n\n    public UNSAFE_componentWillReceiveProps(nextProps: RippleAnimationProps, _nextContext: any): void {\n        if (nextProps !== this.props) {\n            const nextState: RippleAnimationState | null = this.getAnimationStateFromProps(nextProps);\n            if (null != nextState) {\n                this.setState(nextState);\n            }\n        }\n    }\n\n    public startAnimation(): void {\n        this.animationStarted();\n        this._rippleAnimation.reset();\n        this._rippleAnimation.start(() => { this.animationFinished() });\n    }\n\n    public stopAnimation(): void {\n        this._rippleAnimation.stop();\n    }\n\n    public resetAnimation(): void {\n        this.stopAnimation();\n        this.state.opacity.setValue(1);\n        this.state.scale.setValue(0);\n    }\n    public finishAnimation = () => {\n        this.stopAnimation();\n        // no extra op\n    }\n\n    protected renderAnimation(content: React.ReactNode): React.ReactNode {\n        const { scale, opacity } = this.state;\n        const { animationConfig } = this.props;\n        const rippleStyle = RippleAnimationWrapper.getRippleStyle(animationConfig.rippleRadius);\n\n        return (\n            <View\n                style={{\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                }}\n            >\n                <Animated.View\n                    style={[\n                        rippleStyle,\n                        {\n                            backgroundColor: animationConfig.rippleColor,\n                            width: scale.interpolate({\n                                inputRange: [0, 1],\n                                outputRange: [0, animationConfig.rippleRadius * 2]\n                            }),\n                            height: scale.interpolate({\n                                inputRange: [0, 1],\n                                outputRange: [0, animationConfig.rippleRadius * 2]\n                            }),\n                            opacity\n                        }\n                    ]}\n                />\n                {content}\n            </View>\n        );\n    }\n\n    protected getAnimationStateFromProps(_: RippleAnimationProps): RippleAnimationState {\n        return {\n            scale: new Animated.Value(0),\n            opacity: new Animated.Value(1)\n        };\n    }\n\n    public static getRippleStyle(contentWidth: number): StyleProp<ViewStyle> {\n        return {\n            position: 'absolute',\n            marginLeft: 0,\n            marginTop: 0,\n            borderRadius: contentWidth\n        };\n    }\n}\n"]}