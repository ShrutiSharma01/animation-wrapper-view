{"version":3,"sources":["BaseAnimationWrapper.tsx"],"names":["BaseAnimationWrapper","React","Component","props","onAnimationFinish","onAnimationStart","_","pressParam","animationConfig","triggerType","AnimationTriggerType","ON_CLICK","startAnimation","componentDidMount","triggerDelay","ON_LOAD","setTimeout","render","content","children","type","AnimationType","DRAGGABLE","_onPress","renderAnimation","componentWillUnmount","stopAnimation"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAGO,MAAeA,oBAAf,SAAgFC,eAAMC,SAAtF,CAAsG;AAAA;AAAA;;AAAA,+CA4C3E,MAAM;AAChC,UAAI,KAAKC,KAAL,CAAWC,iBAAf,EAAkC;AAC9B,aAAKD,KAAL,CAAWC,iBAAX;AACH;AACJ,KAhDwG;;AAAA,8CAkD5E,MAAM;AAC/B,UAAI,KAAKD,KAAL,CAAWE,gBAAf,EAAiC;AAC7B,aAAKF,KAAL,CAAWE,gBAAX;AACH;AACJ,KAtDwG;;AAAA,sCA4DrFC,CAAD,IAA8B;AAC7C,YAAMC,UAAU,GAAG,KAAKJ,KAAL,CAAWK,eAA9B;;AACA,UAAID,UAAU,IAAIA,UAAU,CAACE,WAAX,KAA2BC,4BAAqBC,QAAlE,EAA4E;AACxE,aAAKC,cAAL;AACH;AACJ,KAjEwG;AAAA;;AAUlGC,EAAAA,iBAAiB,GAAS;AAC7B,UAAM;AAACC,MAAAA,YAAD;AAAeL,MAAAA;AAAf,QAA8B,KAAKN,KAAL,CAAWK,eAA/C;;AACA,QAAIC,WAAW,KAAKC,4BAAqBK,OAAzC,EAAkD;AAC9C,UAAID,YAAJ,EAAkB;AACdE,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKJ,cAAL;AACH,SAFS,EAEPE,YAFO,CAAV;AAGH,OAJD,MAIO;AACH,aAAKF,cAAL;AACH;AACJ;AACJ;;AAEMK,EAAAA,MAAM,GAAoB;AAC7B,UAAMC,OAAO,GAAG,KAAKf,KAAL,CAAWgB,QAA3B;;AACA,QAAI,KAAKhB,KAAL,CAAWK,eAAX,CAA2BY,IAA3B,KAAoCC,qBAAcC,SAAtD,EAAiE;AAC7D,0BACI,6BAAC,qCAAD;AAA0B,QAAA,OAAO,EAAE,KAAKC;AAAxC,SACK,KAAKC,eAAL,CAAqBN,OAArB,CADL,CADJ;AAKH,KAND,MAMO;AACH,0BACI,6BAAC,iBAAD,QACK,KAAKM,eAAL,CAAqBN,OAArB,CADL,CADJ;AAKH;AACJ;;AAEMO,EAAAA,oBAAoB,GAAG;AAC1B,SAAKC,aAAL;AACH;;AA1CwG","sourcesContent":["import React from 'react';\nimport {GestureResponderEvent, TouchableWithoutFeedback, View} from 'react-native';\nimport {AnimationTriggerType, AnimationType} from '../../data/Enums';\nimport {AnimationWrapperProps} from '../../Types';\n\nexport abstract class BaseAnimationWrapper<P extends AnimationWrapperProps, S> extends React.Component<P, S> {\n\n    public abstract startAnimation(): void;\n\n    public abstract stopAnimation(): void;\n\n    public abstract resetAnimation(): void;\n\n    public abstract finishAnimation(): void;\n\n    public componentDidMount(): void {\n        const {triggerDelay, triggerType} = this.props.animationConfig;\n        if (triggerType === AnimationTriggerType.ON_LOAD) {\n            if (triggerDelay) {\n                setTimeout(() => {\n                    this.startAnimation();\n                }, triggerDelay);\n            } else {\n                this.startAnimation();\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        const content = this.props.children;\n        if (this.props.animationConfig.type !== AnimationType.DRAGGABLE) {\n            return (\n                <TouchableWithoutFeedback onPress={this._onPress}>\n                    {this.renderAnimation(content)}\n                </TouchableWithoutFeedback>\n            );\n        } else {\n            return (\n                <View>\n                    {this.renderAnimation(content)}\n                </View>\n            )\n        }\n    }\n\n    public componentWillUnmount() {\n        this.stopAnimation();\n    }\n\n    protected animationFinished = () => {\n        if (this.props.onAnimationFinish) {\n            this.props.onAnimationFinish();\n        }\n    }\n\n    protected animationStarted = () => {\n        if (this.props.onAnimationStart) {\n            this.props.onAnimationStart();\n        }\n    }\n\n    protected abstract renderAnimation(content: React.ReactNode): React.ReactNode;\n\n    protected abstract getAnimationStateFromProps(animationConfig: P): S;\n\n    private _onPress = (_: GestureResponderEvent) => {\n        const pressParam = this.props.animationConfig;\n        if (pressParam && pressParam.triggerType === AnimationTriggerType.ON_CLICK) {\n            this.startAnimation();\n        }\n    };\n}\n"]}