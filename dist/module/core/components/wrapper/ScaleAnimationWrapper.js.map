{"version":3,"sources":["ScaleAnimationWrapper.tsx"],"names":["Animated","React","BaseAnimationWrapper","getEasingFunction","ScaleAnimationWrapper","constructor","props","stopAnimation","state","scale","setValue","animationConfig","toScale","getAnimationStateFromProps","isScaled","_scaleAnimation","timing","duration","scaleDuration","toValue","easing","interpolationDef","useNativeDriver","UNSAFE_componentWillReceiveProps","nextProps","_nextContext","nextState","setState","startAnimation","animationStarted","reset","start","animationFinished","stop","resetAnimation","renderAnimation","content","justifyContent","alignItems","transform","_","Value"],"mappings":";;AAAA,SAASA,QAAT,QAAqD,cAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAIA,OAAOC,iBAAP,MAA8B,UAA9B;AAaA,OAAO,MAAMC,qBAAN,SAAoCF,oBAApC,CAAmG;AAI/FG,EAAAA,WAAW,CAACC,KAAD,EAA6B;AAC3C,UAAMA,KAAN;;AAD2C;;AAAA;;AAAA,6CAqCtB,MAAM;AAC3B,WAAKC,aAAL;AACA,WAAKC,KAAL,CAAWC,KAAX,CAAiBC,QAAjB,CAA0B,KAAKJ,KAAL,CAAWK,eAAX,CAA2BC,OAArD;AACH,KAxC8C;;AAE3C,SAAKJ,KAAL,GAAa,KAAKK,0BAAL,CAAgCP,KAAhC,CAAb;AACA,SAAKQ,QAAL,GAAgB,KAAhB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAsB,KAAKL,KAAjC;AACA,SAAKS,eAAL,GAAuBf,QAAQ,CAACgB,MAAT,CAAgB,KAAKR,KAAL,CAAWC,KAA3B,EAAkC;AACrDQ,MAAAA,QAAQ,EAAEN,eAAe,CAACO,aAD2B;AAErDC,MAAAA,OAAO,EAAG,KAAKL,QAAN,GAAkB,CAAlB,GAAsBH,eAAe,CAACC,OAFM;AAGrDQ,MAAAA,MAAM,EAAEjB,iBAAiB,CAACQ,eAAe,CAACU,gBAAjB,CAH4B;AAIrDC,MAAAA,eAAe,EAAE;AAJoC,KAAlC,CAAvB;AAMH;;AAEMC,EAAAA,gCAAgC,CAACC,SAAD,EAAiCC,YAAjC,EAA0D;AAC7F,QAAID,SAAS,KAAK,KAAKlB,KAAvB,EAA8B;AAC1B,YAAMoB,SAAqC,GAAG,KAAKb,0BAAL,CAAgCW,SAAhC,CAA9C;;AACA,UAAI,QAAQE,SAAZ,EAAuB;AACnB,aAAKC,QAAL,CAAcD,SAAd;AACH;AACJ;AACJ;;AAEME,EAAAA,cAAc,GAAS;AAC1B,SAAKC,gBAAL;;AACA,SAAKd,eAAL,CAAqBe,KAArB;;AACA,SAAKf,eAAL,CAAqBgB,KAArB,CAA2B,MAAM;AAAE,WAAKC,iBAAL;AAA0B,KAA7D;AACH;;AAEMzB,EAAAA,aAAa,GAAS;AACzB,SAAKQ,eAAL,CAAqBkB,IAArB;AACH;;AAEMC,EAAAA,cAAc,GAAS;AAC1B,SAAK3B,aAAL;AACA,SAAKC,KAAL,CAAWC,KAAX,CAAiBC,QAAjB,CAA0B,CAA1B;AACH;;AAOSyB,EAAAA,eAAe,CAACC,OAAD,EAA4C;AACjE,UAAM3B,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AAEA,wBACI,oBAAC,QAAD,CAAU,IAAV;AACI,MAAA,KAAK,EAAE;AACH4B,QAAAA,cAAc,EAAE,QADb;AAEHC,QAAAA,UAAU,EAAE,QAFT;AAGHC,QAAAA,SAAS,EAAE,CACP;AAAE9B,UAAAA;AAAF,SADO;AAHR;AADX,OAQK2B,OARL,CADJ;AAYH;;AAESvB,EAAAA,0BAA0B,CAAC2B,CAAD,EAA8C;AAC9E,WAAO;AACH/B,MAAAA,KAAK,EAAE,IAAIT,QAAQ,CAACyC,KAAb,CAAmB,CAAnB;AADJ,KAAP;AAGH;;AAnEqG","sourcesContent":["import { Animated, Easing, ToastAndroid, View } from 'react-native';\nimport React from 'react';\nimport { BaseAnimationWrapper } from './BaseAnimationWrapper';\n\nimport { ScaleAnimationConfig } from '../../data/ScaleAnimationConfig';\nimport { AnimationWrapperProps } from '../../Types';\nimport getEasingFunction from \"../Utils\";\n\n\ninterface ScaleAnimationState {\n    scale: Animated.Value;\n}\n\n\nexport interface ScaleAnimationProps extends AnimationWrapperProps {\n    animationConfig: ScaleAnimationConfig;\n}\n\n\nexport class ScaleAnimationWrapper extends BaseAnimationWrapper<ScaleAnimationProps, ScaleAnimationState> {\n    private isScaled: boolean;\n    private _scaleAnimation: Animated.CompositeAnimation;\n\n    public constructor(props: ScaleAnimationProps) {\n        super(props);\n        this.state = this.getAnimationStateFromProps(props);\n        this.isScaled = false;\n        const { animationConfig } = this.props;\n        this._scaleAnimation = Animated.timing(this.state.scale, {\n            duration: animationConfig.scaleDuration,\n            toValue: (this.isScaled) ? 1 : animationConfig.toScale,\n            easing: getEasingFunction(animationConfig.interpolationDef),\n            useNativeDriver: false\n        });\n    }\n\n    public UNSAFE_componentWillReceiveProps(nextProps: ScaleAnimationProps, _nextContext: any): void {\n        if (nextProps !== this.props) {\n            const nextState: ScaleAnimationState | null = this.getAnimationStateFromProps(nextProps);\n            if (null != nextState) {\n                this.setState(nextState);\n            }\n        }\n    }\n\n    public startAnimation(): void {\n        this.animationStarted();\n        this._scaleAnimation.reset();\n        this._scaleAnimation.start(() => { this.animationFinished() });\n    }\n\n    public stopAnimation(): void {\n        this._scaleAnimation.stop();\n    }\n\n    public resetAnimation(): void {\n        this.stopAnimation();\n        this.state.scale.setValue(1);\n    }\n\n    public finishAnimation = () => {\n        this.stopAnimation();\n        this.state.scale.setValue(this.props.animationConfig.toScale);\n    }\n\n    protected renderAnimation(content: React.ReactNode): React.ReactNode {\n        const scale = this.state.scale;\n\n        return (\n            <Animated.View\n                style={{\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    transform: [\n                        { scale }\n                    ]\n                }}>\n                {content}\n            </Animated.View>\n        );\n    }\n\n    protected getAnimationStateFromProps(_: ScaleAnimationProps): ScaleAnimationState {\n        return {\n            scale: new Animated.Value(1)\n        };\n    }\n}\n"]}