{"version":3,"sources":["SlideAnimationWrapper.tsx"],"names":["Animated","Dimensions","React","BaseAnimationWrapper","AnimationType","getEasingFunction","SlideAnimationWrapper","constructor","props","stopAnimation","state","translate","setValue","_getFinalTranslateValue","_screenWidth","Math","round","get","width","_screenHeight","height","getAnimationStateFromProps","animationConfig","_animationType","type","config","fromValue","_getInitialTranslateValue","toValue","finalOffset","duration","animationDuration","_slideAnimation","timing","easing","interpolationDef","useNativeDriver","UNSAFE_componentWillReceiveProps","nextProps","_nextContext","nextState","setState","startAnimation","animationStarted","reset","start","animationFinished","stop","resetAnimation","renderAnimation","content","SLIDE_HORIZONTAL","justifyContent","alignItems","transform","translateX","translateY","Value","initialOffset","undefined","SLIDE_VERTICAL","direction"],"mappings":"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","sourcesContent":["import {Animated, Dimensions, TransformsStyle} from 'react-native';\nimport React from 'react';\nimport {BaseAnimationWrapper} from './BaseAnimationWrapper';\nimport {\n    SlideAnimationConfig,\n    SlideHorizontalAnimationConfig,\n    SlideHorizontalDirection,\n    SlideVerticalAnimationConfig,\n    SlideVerticalDirection\n} from '../../data/SlideAnimationConfig';\nimport {AnimationType} from '../../data/Enums';\nimport {SlideAnimationProps} from '../../Types';\nimport getEasingFunction from \"../Utils\";\n\ninterface SlideAnimationState {\n    translate: Animated.Value;\n}\n\nexport interface SlideHorizontalAnimationProps extends SlideAnimationProps {\n    animationConfig: SlideHorizontalAnimationConfig;\n}\n\nexport interface SlideVerticalAnimationProps extends SlideAnimationProps {\n    animationConfig: SlideVerticalAnimationConfig;\n}\n\nexport class SlideAnimationWrapper extends BaseAnimationWrapper<SlideAnimationProps, SlideAnimationState> {\n\n    private _slideAnimation: Animated.CompositeAnimation;\n\n    private _screenWidth: number;\n    private _screenHeight: number;\n    private _animationType: AnimationType;\n\n    public constructor(props: SlideAnimationProps) {\n        super(props);\n\n        this._screenWidth = Math.round(Dimensions.get('window').width);\n        this._screenHeight = Math.round(Dimensions.get('window').height);\n        this.state = this.getAnimationStateFromProps(props);\n\n        const {animationConfig} = this.props;\n        this._animationType = animationConfig.type;\n\n        const config = animationConfig as SlideAnimationConfig;\n        let fromValue: number = this._getInitialTranslateValue(this.props);\n        let toValue: number = config.finalOffset;\n        let duration: number = config.animationDuration;\n\n        this.state.translate.setValue(fromValue);\n        this._slideAnimation = Animated.timing(this.state.translate, {\n            duration: duration,\n            toValue: toValue,\n            easing: getEasingFunction(animationConfig.interpolationDef),\n            useNativeDriver: false\n        });\n    }\n\n    public UNSAFE_componentWillReceiveProps(nextProps: SlideAnimationProps, _nextContext: any): void {\n        if (nextProps !== this.props) {\n            const nextState: SlideAnimationState | null = this.getAnimationStateFromProps(nextProps);\n            if (null != nextState) {\n                this.setState(nextState);\n            }\n        }\n    }\n\n    public startAnimation(): void {\n        this.animationStarted();\n        this._slideAnimation.reset();\n        this._slideAnimation.start(() => {\n            this.animationFinished()\n        });\n    }\n\n    public stopAnimation(): void {\n        this._slideAnimation.stop();\n    }\n\n    public resetAnimation(): void {\n        this.stopAnimation();\n        this.state.translate.setValue(this._getInitialTranslateValue(this.props));\n    }\n\n    public finishAnimation = () => {\n        this.stopAnimation();\n        this.state.translate.setValue(this._getFinalTranslateValue(this.props));\n    }\n\n    protected renderAnimation(content: React.ReactNode): React.ReactNode {\n        if (this._animationType === AnimationType.SLIDE_HORIZONTAL) {\n            return (\n                <Animated.View style={{\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    transform: [\n                        {translateX: this.state.translate}\n                    ]\n                }}>\n                    {content}\n                </Animated.View>\n            );\n        } else {\n            return (\n                <Animated.View style={{\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    transform: [\n                        {translateY: this.state.translate}\n                    ]\n                }}>\n                    {content}\n                </Animated.View>\n            );\n        }\n\n    }\n\n    protected getAnimationStateFromProps(props: SlideAnimationProps): SlideAnimationState {\n        return {\n            translate: new Animated.Value(this._getInitialTranslateValue(props))\n        }\n    }\n\n    private _getInitialTranslateValue(props: SlideAnimationProps): number {\n        const config = props.animationConfig as SlideAnimationConfig;\n        if (config.initialOffset === undefined || config.initialOffset === 0) {\n            if (config.type === AnimationType.SLIDE_VERTICAL) {\n                const direction: SlideVerticalDirection | undefined = (config as SlideVerticalAnimationConfig).direction;\n                if (direction === \"top_down\") {\n                    return -this._screenHeight;\n                } else {\n                    return this._screenHeight;\n                }\n            } else {\n                const direction: SlideHorizontalDirection | undefined = (config as SlideHorizontalAnimationConfig).direction;\n                if (direction === \"ltr\") {\n                    return -this._screenWidth;\n                } else {\n                    return this._screenWidth;\n                }\n            }\n        } else return config.initialOffset;\n    }\n\n    private _getFinalTranslateValue(props: SlideAnimationProps): number {\n        const config = props.animationConfig as SlideAnimationConfig;\n        return config.finalOffset;\n    }\n}\n"]}