{"version":3,"sources":["DraggableAnimationWrapper.tsx"],"names":["Animated","PanResponder","React","BaseAnimationWrapper","DraggableAnimationWrapper","constructor","props","stopAnimation","state","pan","ValueXY","panResponder","undefined","getAnimationStateFromProps","UNSAFE_componentWillReceiveProps","nextProps","_nextContext","nextState","setState","renderAnimation","content","getLayout","panHandlers","_","create","onStartShouldSetPanResponder","onPanResponderMove","e","gesture","event","dx","x","dy","y","onPanResponderRelease","spring","toValue","useNativeDriver","start","resetAnimation","startAnimation"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,cAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAiBA,OAAO,MAAMC,yBAAN,SAAwCD,oBAAxC,CAA+G;AAE3GE,EAAAA,WAAW,CAACC,KAAD,EAAiC;AAC/C,UAAMA,KAAN;;AAD+C,6CAqE1B,MAAM;AAC3B,WAAKC,aAAL,GAD2B,CAE3B;AACH,KAxEkD;;AAG/C,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,IAAIT,QAAQ,CAACU,OAAb,EADI;AAETC,MAAAA,YAAY,EAAEC;AAFL,KAAb;AAIA,SAAKJ,KAAL,GAAa,KAAKK,0BAAL,CAAgCP,KAAhC,CAAb;AACH;;AAEMQ,EAAAA,gCAAgC,CAACC,SAAD,EAAqCC,YAArC,EAA8D;AACjG,QAAID,SAAS,KAAK,KAAKT,KAAvB,EAA8B;AAC1B,YAAMW,SAAyC,GAAG,KAAKJ,0BAAL,CAAgCE,SAAhC,CAAlD;;AACA,UAAI,QAAQE,SAAZ,EAAuB;AACnB,aAAKC,QAAL,CAAcD,SAAd;AACH;AACJ;AACJ;;AAESE,EAAAA,eAAe,CAACC,OAAD,EAA4C;AACjE,wBACI,oBAAC,QAAD,CAAU,IAAV;AACI,MAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWC,GAAX,CAAeY,SAAf;AADX,OAEQ,KAAKb,KAAL,CAAWG,YAAX,CAAwBW,WAFhC,GAIKF,OAJL,CADJ;AAQH;;AAESP,EAAAA,0BAA0B,CAACU,CAAD,EAAsD;AACtF,UAAM;AAAEd,MAAAA;AAAF,QAAU,KAAKD,KAArB;AAEA,WAAO,EACH,GAAG,KAAKA,KADL;AAEHG,MAAAA,YAAY,EAAEV,YAAY,CAACuB,MAAb,CAAoB;AAC9BC,QAAAA,4BAA4B,EAAE,MAAM,IADN;AAE9BC,QAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AAChC5B,UAAAA,QAAQ,CAAC6B,KAAT,CAAe,CACX,IADW,EAEX;AACIC,YAAAA,EAAE,EAAErB,GAAG,CAACsB,CADZ;AAEIC,YAAAA,EAAE,EAAEvB,GAAG,CAACwB;AAFZ,WAFW,CAAf,EAMGN,CANH,EAMMC,OANN;AAOH,SAV6B;AAW9BM,QAAAA,qBAAqB,EAAE,MAAM;AACzBlC,UAAAA,QAAQ,CAACmC,MAAT,CACI1B,GADJ,EACS;AACL;AAAE2B,YAAAA,OAAO,EAAE;AAAEL,cAAAA,CAAC,EAAE,CAAL;AAAQE,cAAAA,CAAC,EAAE;AAAX,aAAX;AAA2BI,YAAAA,eAAe,EAAE;AAA5C,WAFJ,CAEwD;AAFxD,YAGMC,KAHN;AAIC;AAhByB,OAApB;AAFX,KAAP;AAqBH;;AAGM/B,EAAAA,aAAa,GAAS,CACzB;AACH;;AACMgC,EAAAA,cAAc,GAAS;AAC1B,SAAKhC,aAAL;AACA,SAAKW,QAAL,CAAc,KAAKL,0BAAL,CAAgC,KAAKP,KAArC,CAAd;AACH;;AAEMkC,EAAAA,cAAc,GAAS,CAC1B;AACH;;AArEiH","sourcesContent":["import { Animated, PanResponder } from 'react-native';\nimport React from 'react';\nimport { BaseAnimationWrapper } from './BaseAnimationWrapper';\n\nimport { AnimationWrapperProps } from '../../Types';\nimport BaseAnimationConfig from '../../data/BaseAnimationConfig';\n\n\n\ninterface DraggableAnimationState {\n    pan: Animated.ValueXY,\n    panResponder: any\n}\n\n\nexport interface DraggableAnimationProps extends AnimationWrapperProps {\n    animationConfig: BaseAnimationConfig;\n}\n\nexport class DraggableAnimationWrapper extends BaseAnimationWrapper<DraggableAnimationProps, DraggableAnimationState> {\n\n    public constructor(props: DraggableAnimationProps) {\n        super(props);\n\n        this.state = {\n            pan: new Animated.ValueXY(),\n            panResponder: undefined\n        }\n        this.state = this.getAnimationStateFromProps(props);\n    }\n\n    public UNSAFE_componentWillReceiveProps(nextProps: DraggableAnimationProps, _nextContext: any): void {\n        if (nextProps !== this.props) {\n            const nextState: DraggableAnimationState | null = this.getAnimationStateFromProps(nextProps);\n            if (null != nextState) {\n                this.setState(nextState);\n            }\n        }\n    }\n\n    protected renderAnimation(content: React.ReactNode): React.ReactNode {\n        return (\n            <Animated.View\n                style={this.state.pan.getLayout()}\n                {...this.state.panResponder.panHandlers}\n            >\n                {content}\n            </Animated.View>\n        );\n    }\n\n    protected getAnimationStateFromProps(_: DraggableAnimationProps): DraggableAnimationState {\n        const { pan } = this.state;\n\n        return {\n            ...this.state,\n            panResponder: PanResponder.create({\n                onStartShouldSetPanResponder: () => true,\n                onPanResponderMove: (e, gesture) => {\n                    Animated.event([\n                        null,\n                        {\n                            dx: pan.x,\n                            dy: pan.y,\n                        },\n                    ])(e, gesture)\n                },\n                onPanResponderRelease: () => {\n                    Animated.spring(\n                        pan, // Auto-multiplexed\n                        { toValue: { x: 0, y: 0 }, useNativeDriver: false } // Back to zero\n                        ).start();\n                    }\n            })\n        };\n    }\n\n\n    public stopAnimation(): void {\n        // this.state.translateY.stopAnimation();\n    }\n    public resetAnimation(): void {\n        this.stopAnimation();\n        this.setState(this.getAnimationStateFromProps(this.props));\n    }\n\n    public startAnimation(): void {\n        // no-op\n    }\n\n    public finishAnimation = () => {\n        this.stopAnimation();\n        // no extra op\n    }\n}\n"]}